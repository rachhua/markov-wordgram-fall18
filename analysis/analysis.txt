RACHEL HUA RLH49

Run WordGramDiver for wordgrams of size 2-10 and record
the number of WordGram values/objects that occur more than
once as reported by the runs. For example, with WSIZE = 2,
which generates 2-grams, the output of benchmark and benchmarkShift
each indicates that the total # wordgrams generated is 177,634
and that the # unique wordgrams is 117,181

This means there are 177,634 - 117,181 = 60,453 WordGram values that
occur more than once. Find these same values for other orders
of k and complete the table below for different k-grams/different 
values of WSIZE

WSIZE    # duplicates
2        60,453
3        10,756
4		 1,987
5		 667
6		 362
7		 226
8		 151
9		 105
10		 73

=====
Explain in your own words the conceptual differences between 
the benchmark and benchmarkShift methods. 
Answer these questions: 

(1) Why the results of these methods should be the same in 
terms of changes made to the HashSet parameter.

Results should be the same because both benchmark and benchmarkShift
refer to the same object with the same hashCode. Since this object is 
immutable, changes to the HashSet parameter would not effect the results.

(2) What are the conceptual differences between the two
benchmarking methods

benchmarkShift uses to shiftAdd method to iterate through
the array, whereas benchmark just regularly goes through 
the array in increments of WSIZE.

(3) Is the total amount of memory allocated for arrays
the same or different in the two methods? Account for
arrays created in the methods and arrays created by
WordGram objects. Try to be quantitative in answering.

Different. I created an array and a list in benchmark,
but just an array in benchmarkShift. Thus, more memory
was allocated to benchmark compared to benchmarkShift.
Furthermore, benchmark takes in a huge array of the entire file,
whereas benchmarkShift just takes in the WSIZE then one word
at a time using shiftAdd.

